// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
//用Mux4Way16进行四选一操作: x, not(x), true, false;
   Not16(in = x, out = midx);
   Mux4Way16(a = x, b = midx, c = false, d = true, sel[0] = nx, sel[1] = zx, out = newx);                                                                                
   Not16(in = y, out = midy);
   Mux4Way16(a = y, b = midy, c = false, d = true, sel[0] = ny, sel[1] = zy, out = newy);

   And16(a = newx, b = newy, out = ffalse);
   Add16(a = newx, b = newy, out = ftrue);
   Mux16(a = ffalse, b = ftrue, sel = f, out = output1);  //mux进行二选一: f = 0 或f = 1

   Not16(in = output1, out = output2);
   Mux16(a = output1, b = output2, sel = no, out = out);  //mux进行二选一: no = 0 或no = 1

   Mux16(a = output1, b = output2, sel = no, out[15] = c); //利用第一位来判断是正数(0)还是负数(1);
   Mux(a = false, b = true, sel = c, out = ng);

   Mux16(a = output1, b = output2, sel = no, out = output);
   Or16Way(in = output, out = sig);                        //Or16Way:a[0] or a[1] or a[2] ... or a[15];
   Mux(a = true, b = false, sel = sig, out = zr);          //每一位都是0说明这个数等于0
}